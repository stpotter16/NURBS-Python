Supported File Formats
^^^^^^^^^^^^^^^^^^^^^^

NURBS-Python supports several input and output formats for importing and exporting B-Spline/NURBS curves and surfaces.
Please note that NURBS-Python uses right-handed notation on input and output files.

Text Files
==========

NURBS-Python provides a simple way to import and export the control points and the evaluated control points as ASCII
text files. The details of the file format for curves and surfaces is described below:

.. toctree::
    :maxdepth: 2

    file_formats_txt

Comma-Separated (CSV)
=====================

You may use :py:func:`.export_csv()` function to save control points and/or evaluated points as a CSV file. This
function works with both curves and surfaces.

VTK (Legacy) Format
===================

You may use :py:func:`.export_vtk()` function to save control points and/or evaluated points as a VTK file
(legacy format). This function works with both curves and surfaces.

OBJ Format
==========

You may use :py:func:`.export_obj()` function to export a NURBS surface as a Wavefront .obj file.

Example 1
---------

The following example demonstrates saving surfaces as .obj files:

.. code-block:: python

    # ex_bezier_surface.py
    from geomdl import BSpline
    from geomdl import utilities
    from geomdl import exchange

    # Create a BSpline surface instance
    surf = BSpline.Surface()

    # Set evaluation delta
    surf.delta = 0.01

    # Set up the surface
    surf.degree_u = 3
    surf.degree_v = 2
    control_points = [[0, 0, 0], [0, 1, 0], [0, 2, -3],
                      [1, 0, 6], [1, 1, 0], [1, 2, 0],
                      [2, 0, 0], [2, 1, 0], [2, 2, 3],
                      [3, 0, 0], [3, 1, -3], [3, 2, 0]]
    surf.set_ctrlpts(control_points, 4, 3)
    surf.knotvector_u = utilities.generate_knot_vector(surf.degree_u, 4)
    surf.knotvector_v = utilities.generate_knot_vector(surf.degree_v, 3)

    # Evaluate surface
    surf.evaluate()

    # Save surface as a .obj file
    exchange.export_obj(surf, "bezier_surf.obj")

Example 2
---------

The following example combines :code:`shapes` module together with :code:`exchange` module:

.. code-block:: python

    from geomdl.shapes import surface
    from geomdl import exchange

    # Generate cylindirical surface
    surf = surface.cylinder(radius=5, height=12.5)

    # Set evaluation delta
    surf.delta = 0.01

    # Evaluate the surface
    surf.evaluate()

    # Save surface as a .obj file
    exchange.export_obj(surf, "cylindirical_surf.obj")

STL Format
==========

Exporting to STL files works in the same way explained in OBJ Files section. To export a NURBS surface as a .stl file,
you may use :py:func:`.export_stl()` function. This function saves in binary format by default but there is an option to
change the save file format to plain text. Please see the :doc:`documentation <module_exchange>` for details.

Object File Format (OFF)
========================

Very similar to exporting as OBJ and STL formats, you may use :py:func:`.export_off()` function to export a NURBS surface
as a .off file.

Libconfig Format
================

`libconfig <https://hyperrealm.github.io/libconfig/>`_ is a lightweight library for processing configuration files and
it is often used on C/C++ projects. The library doesn't define a format but it defines a syntax for the files it can
process. NURBS-Python uses :py:func:`.export_cfg()` and :py:func:`.import_cfg()` functions to exporting and importing
shape data which can be processed by libconfig-compatible libraries. Although exporting does not require any external
libraries, importing functionality depends on `libconf <https://pypi.org/project/libconf/>`_ module, which is a pure
Python library for parsing libconfig-formatted files.

Since any NURBS shape can be generated by defining degree, knot vector and (weighted) control points, NURBS-Python
libconfig format defines the following elements:

* ``type`` is a string defining the type of the shape, *curve* or *surface*
* ``degree`` for curves, ``degree_u`` and ``degree_v`` for surfaces
* ``knotvector`` for curves, ``knotvector_u`` and ``knotvector_v`` for surfaces
* ``control_points`` is a 1-dimensional list of coordinates
* ``weights`` is an array for NURBS shapes, otherwise it is set to 0
* ``control_points_size_u`` and ``control_points_size_v`` for defining surface control points grid size on the parametric space

In addition, NURBS-Python also exports the shape name and sample size values but these are not required to import shape
data.

Reading Exported .cfg Files with libconf Module
-----------------------------------------------

The following example illustrates reading the exported .cfg file with `libconf <https://pypi.org/project/libconf/>`_
module as a reference for `libconfig <https://hyperrealm.github.io/libconfig/>`_-based systems in different programming
languages.

.. code-block:: python

    # Assuming that you have already installed 'libconf'
    import libconf

    # Skipping export steps and assuming that we have already exported the data as 'my_nurbs.cfg'
    with open("my_nurbs.cfg", "r") as fp:
        # Open the file and parse using libconf module
        data = libconf.load(fp)

    # 'count' attribute shows the number of shapes loaded from the file
    print(data.count)

    # C-style for loop for processing loaded shapes
    for idx in range(data.count)
        # 'shape' variable contains the curve or surface data
        shape = data.shapes[idx]

    # Python-style for loop
    for shape in data.shapes:
        # As an example, we access to the control points attribute
        ctrlpts = shape.control_points

    # If you are sure that you have loaded a single shape from the file:
    my_shape = data.shapes[0]

NURBS-Python exports data in the way that allows processing any number of curves or surfaces with a simple for loop.
This approach simplifies implementation of file reading routines for different systems and programming languages.
